---
// Componente que usa la API dinámicamente
const videosResponse = await fetch(`${Astro.url.origin}/api/videos`);
const videosData = await videosResponse.json();
const videos = videosData.videos || [];

function timeAgo(dateString: string | number | Date) {
    if (!dateString) return "Fecha desconocida";
    const now = new Date();
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return "Fecha inválida";
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffMonths = Math.floor(diffDays / 30);
    const diffYears = Math.floor(diffDays / 365);
    if (diffYears > 0)
        return `hace ${diffYears} año${diffYears > 1 ? "s" : ""}`;
    if (diffMonths > 0)
        return `hace ${diffMonths} mes${diffMonths > 1 ? "es" : ""}`;
    if (diffDays > 0) return `hace ${diffDays} día${diffDays > 1 ? "s" : ""}`;
    return "Hoy";
}
---

<div class="container-fluid my-5 d-flex justify-content-center">
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-4 video-container" style="width: 80vw; max-width: 1920px;">
        {videos.map((video: { url: string; titulo: string; views: string; date: string | number | Date; }) => {
            const videoId = video.url.split("/").pop();
            return (
                <div class="col-12 col-md-6 col-xl-4 d-flex flex-column align-items-center video-item" data-title={video.titulo.toLowerCase()}>
                    <a href={`/video-dynamic/${videoId}`} class="video-thumb-link w-100" style="text-decoration:none;">
                        <div class="video-frame-wrapper">
                            <img src={`https://img.youtube.com/vi/${videoId}/hqdefault.jpg`} alt={video.titulo} style="width:100%;height:100%;object-fit:cover;" loading="lazy" />
                        </div>
                    </a>
                    <p class="text-white mt-2 mb-0 w-100 text-center">
                        {video.titulo}
                    </p>
                    <span class="text-secondary mb-4" style="font-size:0.95em;">
                        • {parseInt(video.views).toLocaleString()} views {timeAgo(video.date)}
                    </span>
                </div>
            );
        })}
    </div>
</div>

<!-- Mostrar información de cache si está disponible -->
{videosData.cached && (
    <div class="text-center text-secondary small">
        <p>Datos en cache - Última actualización: {new Date(videosData.updatedAt).toLocaleString()}</p>
    </div>
)}

{videosData.fallback && (
    <div class="text-center text-warning small">
        <p>⚠️ Usando datos de respaldo debido a un error en la API</p>
    </div>
)}

<style>
    .video-frame-wrapper {
        width: 100%;
        aspect-ratio: 16 / 9;
        border-radius: 1.5rem;
        overflow: hidden;
        background: #000;
    }
    .video-thumb-link:hover img {
        filter: brightness(0.8);
        transition: filter 0.2s;
    }
</style>
