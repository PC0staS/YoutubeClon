---
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/navbar.astro";
import Footer from "../../components/footer.astro";

interface Comment {
  id?: string;
  author: string;
  text: string;
  publishedAt: string;
  authorProfileImageUrl?: string;
  likeCount?: number;
  replies?: Comment[];
}

interface Video {
  titulo: string;
  url: string;
  views: string;
  date: string;
  descripcion?: string;
  comentarios: Comment[];
}

const { params } = Astro;
const videoId = params.id;

// Fetch videos from API
const videosResponse = await fetch(`${Astro.url.origin}/api/videos`);
const videosData = await videosResponse.json();
const videos: Video[] = videosData.videos || [];

const video = videos.find((v: Video) => v.url.includes(videoId ?? ""));

function timeAgo(dateString: string) {
  if (!dateString) return "Fecha desconocida";
  const now = new Date();
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return "Fecha inv√°lida";
  const diffMs = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  const diffMonths = Math.floor(diffDays / 30);
  const diffYears = Math.floor(diffDays / 365);
  if (diffYears > 0) return `hace ${diffYears} a√±o${diffYears > 1 ? "s" : ""}`;
  if (diffMonths > 0)
    return `hace ${diffMonths} mes${diffMonths > 1 ? "es" : ""}`;
  if (diffDays > 0) return `hace ${diffDays} d√≠a${diffDays > 1 ? "s" : ""}`;
  return "Hoy";
}
---

<Layout>
  <Navbar />  {
    video ? (
      <div class="container-fluid px-2 px-md-3 py-3 py-md-5">
        <div class="row g-3 g-md-4">
          <div class="col-12 col-lg-8 d-flex flex-column">
            <div class="video-detail-player mb-3 mb-md-4 w-100">
              <iframe
                src={video.url}
                title={video.titulo}
                allowfullscreen
                loading="lazy"
                style="width:100%; height:100%; border:0; border-radius:1rem; background:#000;"
              />
            </div>
            <h2 class="text-white fw-bold text-start px-2 px-md-3 fs-4 fs-md-2">{video.titulo}</h2>
            <div class="text-secondary text-start px-2 px-md-3 mb-3">
              ‚Ä¢ {parseInt(video.views).toLocaleString()} views{" "}
              {timeAgo(video.date)}
            </div>
            <div class="text-white text-start px-2 px-md-3 mt-3">
              <h5 class="fs-5 fs-md-4">Descripci√≥n</h5>
              <button
                class="btn btn-outline-secondary btn-sm mb-2"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#descripcionCollapse"
                aria-expanded="false"
                aria-controls="descripcionCollapse"
              >
                Mostrar/Ocultar descripci√≥n
              </button>
              <div class="collapse" id="descripcionCollapse">
                <p style="white-space: pre-line;" class="small">
                  {video.descripcion ?? "Sin descripci√≥n disponible."}
                </p>
              </div>
              <div>
                <a
                  href={video.url.replace("embed/", "watch?v=")}
                  target="_blank"
                  rel="noopener"
                  class="btn btn-danger btn-sm mt-2"
                >
                  Ver en YouTube
                </a>
              </div>
            </div>
            <div class="text-white text-start px-2 px-md-3 mt-4 bg-upload rounded p-3 p-md-4">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="fs-5 fs-md-4 mb-0">Comentarios</h5>
                <button 
                  id="reloadCommentsBtn" 
                  class="btn-reload"
                  data-video-id={videoId}
                  title="Actualizar comentarios"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16" class="reload-icon">
                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                  </svg>
                </button>
              </div>
              <div id="commentsContainer">
                {Array.isArray(video.comentarios) &&
                video.comentarios.length > 0 ? (
                  <div class="comments-list">
                    {video.comentarios.map((comentario, idx) => {
                      const profileImg = comentario.authorProfileImageUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(comentario.author)}&background=222&color=fff&size=48`;
                      return (
                        <div class="comment-thread">
                          <div class="comment-main">
                            <img
                              src={profileImg}
                              alt={comentario.author}
                              class="comment-avatar"
                              loading="lazy"
                            />
                            <div class="comment-content">
                              <div class="comment-header">
                                <span class="comment-author">{comentario.author}</span>
                                <span class="comment-date">{new Date(comentario.publishedAt).toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
                              </div>
                              <div class="comment-text">{comentario.text}</div>
                              {(comentario as any).likeCount && (comentario as any).likeCount > 0 && (
                                <div class="comment-likes">
                                  <i class="like-icon">üëç</i> {(comentario as any).likeCount}
                                </div>
                              )}
                            </div>
                          </div>
                          {(comentario as any).replies && (comentario as any).replies.length > 0 && (
                            <div class="replies-container">
                              {(comentario as any).replies.map((reply: any, replyIdx: number) => {
                                const replyProfileImg = reply.authorProfileImageUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(reply.author)}&background=333&color=fff&size=32`;
                                return (
                                  <div class="reply-item">
                                    <img
                                      src={replyProfileImg}
                                      alt={reply.author}
                                      class="reply-avatar"
                                      loading="lazy"
                                    />
                                    <div class="reply-content">
                                      <div class="reply-header">
                                        <span class="reply-author">{reply.author}</span>
                                        <span class="reply-date">{new Date(reply.publishedAt).toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
                                      </div>
                                      <div class="reply-text">{reply.text}</div>
                                      {reply.likeCount && reply.likeCount > 0 && (
                                        <div class="reply-likes">
                                          <i class="like-icon">üëç</i> {reply.likeCount}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p class="no-comments">No hay comentarios para este video.</p>
                )}
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-4">
            <h5 class="text-white mb-3 px-2 px-md-0">M√°s videos</h5>
            <div class="d-flex flex-column gap-2 gap-md-3 px-2 px-md-0">
              {videos
                .filter((v: Video) => v !== video)
                .map((v: Video) => {
                  const videoId = v.url.split("/").pop();
                  return (
                    <a
                      href={`/video-dynamic/${videoId}`}
                      class="d-flex text-decoration-none text-white video-sidebar-item p-2 rounded bg-grey-dark"
                    >
                      <img
                        src={`https://img.youtube.com/vi/${videoId}/mqdefault.jpg`}
                        alt={v.titulo}
                        style="width: 168px; height: 94px; object-fit: cover; border-radius: 0.5rem; flex-shrink: 0;"
                        class="d-md-none"
                      />
                      <img
                        src={`https://img.youtube.com/vi/${videoId}/mqdefault.jpg`}
                        alt={v.titulo}
                        style="width: 168px; height: 94px; object-fit: cover; border-radius: 0.5rem; flex-shrink: 0;"
                        class="d-none d-md-block"
                      />
                      <div class="ms-2 ms-md-3 flex-grow-1 min-width-0">
                        <div class="fw-bold small text-start video-sidebar-title">{v.titulo}</div>
                        <div class="text-secondary small text-start">
                          {parseInt(v.views).toLocaleString()} views{" "}
                          {timeAgo(v.date)}
                        </div>
                      </div>
                    </a>
                  );
                })}
            </div>
          </div>
        </div>
        
        <!-- Informaci√≥n de API -->
        {videosData.cached && (
          <div class="text-center text-secondary small mt-4">
            <p>Datos en cache - √öltima actualizaci√≥n: {new Date(videosData.updatedAt).toLocaleString()}</p>
          </div>
        )}
        
        {videosData.fallback && (
          <div class="text-center text-warning small mt-4">
            <p>‚ö†Ô∏è Usando datos de respaldo debido a un error en la API</p>
          </div>
        )}
      </div>
    ) : (
      <div class="container-fluid px-2 px-md-3 py-3 py-md-5 text-center text-white">
        <h2 class="fs-3 fs-md-2">Video no encontrado</h2>
        <a href="/" class="btn btn-secondary mt-3">
          Volver al inicio
        </a>
      </div>
    )
  }
  <style>
    .video-detail-player {
      width: 100%;
      max-width: 900px;
      aspect-ratio: 16 / 9;
      margin: 0 auto;
      background: #000;
      border-radius: 1rem;
      overflow: hidden;
    }
    
    .video-sidebar-item:hover {
      background: #333 !important;
      text-decoration: none;
      transform: translateY(-1px);
      transition: all 0.2s ease;
    }
    
    .video-sidebar-title {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      text-overflow: ellipsis;
      line-height: 1.3;
      max-height: 2.6em;
    }
    
    @media (max-width: 576px) {
      .video-detail-player {
        border-radius: 0.8rem;
      }
      
      .video-sidebar-title {
        font-size: 0.85rem !important;
        -webkit-line-clamp: 3;
        max-height: 3.6em;
      }
      
      .video-sidebar-item {
        padding: 0.75rem !important;
      }
    }
    
    @media (max-width: 768px) {
      .min-width-0 {
        min-width: 0;
      }
    }
    
    /* Estilos del bot√≥n de recarga y mensajes de estado (mantener aqu√≠) */
    .btn-reload {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 6px;
      padding: 8px;
      color: rgba(255, 255, 255, 0.8);
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
    }
    
    .btn-reload:hover {
      background: rgba(255, 255, 255, 0.1);
      color: white;
      border-color: rgba(255, 255, 255, 0.3);
      transform: translateY(-1px);
    }
    
    .btn-reload:active {
      transform: translateY(0);
    }
    
    .btn-reload:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }
    
    .reload-icon {
      transition: transform 0.3s ease;
      width: 14px;
      height: 14px;
    }
    
    .btn-reload:hover .reload-icon {
      transform: rotate(180deg);
    }
    
    .btn-reload.loading .reload-icon {
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    .status-message {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 16px;
      border-radius: 8px;
      font-size: 0.875rem;
      font-weight: 500;
      z-index: 1000;
      max-width: 300px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease;
    }
    
    .status-message.show {
      opacity: 1;
      transform: translateX(0);
    }
    
    .status-message.success {
      background: rgba(34, 197, 94, 0.9);
      color: white;
      border-left: 4px solid #22c55e;
    }
    
    .status-message.error {
      background: rgba(239, 68, 68, 0.9);
      color: white;
      border-left: 4px solid #ef4444;
    }
    
    @media (max-width: 576px) {
      .status-message {
        top: 10px;
        right: 10px;
        left: 10px;
        max-width: none;
      }
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const reloadBtn = document.getElementById('reloadCommentsBtn');
      const commentsContainer = document.getElementById('commentsContainer');
      
      // Funci√≥n para mostrar mensajes de estado elegantes
      function showStatusMessage(message: string, type: string) {
        // Remover mensaje anterior si existe
        const existingMsg = document.querySelector('.status-message');
        if (existingMsg) {
          existingMsg.remove();
        }
        
        const statusMsg = document.createElement('div');
        statusMsg.className = 'status-message ' + type;
        statusMsg.textContent = message;
        document.body.appendChild(statusMsg);
        
        // Mostrar con animaci√≥n
        setTimeout(() => statusMsg.classList.add('show'), 10);
        
        // Ocultar despu√©s de 3 segundos
        setTimeout(() => {
          statusMsg.classList.remove('show');
          setTimeout(() => statusMsg.remove(), 300);
        }, 3000);
      }
      
      // Funci√≥n para recargar comentarios
      async function reloadComments() {
        if (!reloadBtn || !commentsContainer) return;
        
        let videoId = reloadBtn.dataset.videoId;
        console.log('Button clicked, raw video ID:', videoId);
        
        // Extract video ID from current URL if not available
        if (!videoId) {
          const urlParts = window.location.pathname.split('/');
          videoId = urlParts[urlParts.length - 1];
          console.log('Extracted video ID from URL:', videoId);
        }
        
        if (!videoId) {
          console.error('No video ID found');
          showStatusMessage('Error: No se pudo obtener el ID del video', 'error');
          return;
        }
        
        // Mostrar estado de carga
        (reloadBtn as any).disabled = true;
        reloadBtn.classList.add('loading');
        
        try {
          const apiUrl = '/api/comments/' + videoId;
          console.log('Fetching from:', apiUrl);
          
          const response = await fetch(apiUrl);
          const data = await response.json();
          
          console.log('API Response:', data);
          
          if (data.success && data.comments) {
            // Actualizar comentarios
            if (data.comments.length > 0) {
              // Generar HTML exactamente igual al que genera Astro
              let commentsHtml = '<div class="comments-list">';
              
              data.comments.forEach(function(comment: any) {
                const profileImg = comment.authorProfileImageUrl || 
                  `https://ui-avatars.com/api/?name=${encodeURIComponent(comment.author)}&background=222&color=fff&size=48`;
                
                // Escapar caracteres especiales en el texto
                const escapeHtml = (text: string) => {
                  const div = document.createElement('div');
                  div.textContent = text;
                  return div.innerHTML;
                };
                
                commentsHtml += `
                  <div class="comment-thread">
                    <div class="comment-main">
                      <img src="${profileImg}" alt="${escapeHtml(comment.author)}" class="comment-avatar" loading="lazy">
                      <div class="comment-content">
                        <div class="comment-header">
                          <span class="comment-author">${escapeHtml(comment.author)}</span>
                          <span class="comment-date">${new Date(comment.publishedAt).toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
                        </div>
                        <div class="comment-text">${escapeHtml(comment.text)}</div>`;
                
                // Agregar likes si existen
                if (comment.likeCount && comment.likeCount > 0) {
                  commentsHtml += `
                        <div class="comment-likes">
                          <i class="like-icon">üëç</i> ${comment.likeCount}
                        </div>`;
                }
                
                commentsHtml += `
                      </div>
                    </div>`;
                
                // Agregar respuestas si existen
                if (comment.replies && comment.replies.length > 0) {
                  commentsHtml += `
                    <div class="replies-container">`;
                  
                  comment.replies.forEach(function(reply: any) {
                    const replyProfileImg = reply.authorProfileImageUrl || 
                      `https://ui-avatars.com/api/?name=${encodeURIComponent(reply.author)}&background=333&color=fff&size=32`;
                    
                    commentsHtml += `
                      <div class="reply-item">
                        <img src="${replyProfileImg}" alt="${escapeHtml(reply.author)}" class="reply-avatar" loading="lazy">
                        <div class="reply-content">
                          <div class="reply-header">
                            <span class="reply-author">${escapeHtml(reply.author)}</span>
                            <span class="reply-date">${new Date(reply.publishedAt).toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
                          </div>
                          <div class="reply-text">${escapeHtml(reply.text)}</div>`;
                    
                    if (reply.likeCount && reply.likeCount > 0) {
                      commentsHtml += `
                          <div class="reply-likes">
                            <i class="like-icon">üëç</i> ${reply.likeCount}
                          </div>`;
                    }
                    
                    commentsHtml += `
                        </div>
                      </div>`;
                  });
                  
                  commentsHtml += `
                    </div>`;
                }
                
                commentsHtml += `
                  </div>`;
              });
              
              commentsHtml += '</div>';
              
              // Reemplazar contenido
              commentsContainer.innerHTML = commentsHtml;
              
              // Count total interactions (comments + replies)
              let totalInteractions = data.comments.length;
              data.comments.forEach(function(comment: any) {
                if (comment.replies) {
                  totalInteractions += comment.replies.length;
                }
              });
              
              showStatusMessage(totalInteractions + ' comentarios actualizados', 'success');
            } else {
              commentsContainer.innerHTML = '<p class="no-comments">No hay comentarios para este video.</p>';
              showStatusMessage('No se encontraron comentarios', 'success');
            }
            
          } else {
            console.error('API error:', data.error);
            throw new Error(data.error || 'Error al cargar comentarios');
          }
          
        } catch (error) {
          console.error('Error reloading comments:', error);
          showStatusMessage('Error al actualizar comentarios', 'error');
        }
        
        // Restaurar bot√≥n
        (reloadBtn as any).disabled = false;
        reloadBtn.classList.remove('loading');
      }
      
      // Ejecutar solo cuando se haga clic en el bot√≥n
      if (reloadBtn && commentsContainer) {
        reloadBtn.addEventListener('click', reloadComments);
      }
    });
  </script>
  
  <Footer />
</Layout>
