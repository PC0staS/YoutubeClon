---
import { videos } from "../../data/videos.js";
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/navbar.astro";
import Footer from "../../components/footer.astro";

const { params } = Astro;
const videoId = params.id;
const video = videos.find((v) => v.url.includes(videoId ?? ""));

function timeAgo(dateString: string) {
  if (!dateString) return "Fecha desconocida";
  const now = new Date();
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return "Fecha inválida";
  const diffMs = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  const diffMonths = Math.floor(diffDays / 30);
  const diffYears = Math.floor(diffDays / 365);
  if (diffYears > 0) return `hace ${diffYears} año${diffYears > 1 ? "s" : ""}`;
  if (diffMonths > 0)
    return `hace ${diffMonths} mes${diffMonths > 1 ? "es" : ""}`;
  if (diffDays > 0) return `hace ${diffDays} día${diffDays > 1 ? "s" : ""}`;
  return "Hoy";
}
---

<Layout>
  {/* Navbar superior */}
  <Navbar />
  {
    video ? (      // Si se encuentra el video, muestra el contenido principal
      <div class="container-fluid px-2 px-md-3 py-3 py-md-5">
        <div class="row g-3 g-md-4">
          {/* Columna principal: reproductor y detalles del video */}
          <div class="col-12 col-lg-9 d-flex flex-column">
            {/* Reproductor de video (iframe de YouTube) */}
            <div class="video-detail-player mb-3 mb-md-4 w-100">
              <iframe
                src={video.url}
                title={video.titulo}
                allowfullscreen
                loading="lazy"
                style="width:100%; height:100%; border:0; border-radius:1rem; background:#000;"
              />
            </div>
            {/* Título del video */}
            <h2 class="text-white fw-bold text-start px-2 px-md-3 fs-4 fs-md-2">{video.titulo}</h2>
            {/* Vistas y fecha relativa */}
            <div class="text-secondary text-start px-2 px-md-3 mb-3">
              • {parseInt(video.views).toLocaleString()} views{" "}
              {timeAgo(video.date)}
            </div>            {/* Descripción del video en un collapse de Bootstrap */}
            <div class="text-white text-start px-2 px-md-3 mt-3">
              <h5 class="fs-5 fs-md-4">Descripción</h5>
              {/* Botón para mostrar/ocultar la descripción */}
              <button
                class="btn btn-outline-secondary btn-sm mb-2"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#descripcionCollapse"
                aria-expanded="false"
                aria-controls="descripcionCollapse"
              >
                Mostrar/Ocultar descripción
              </button>
              {/* Collapse de Bootstrap para la descripción */}
              <div class="collapse" id="descripcionCollapse">
                {/* Respeta los saltos de línea en la descripción */}
                <p style="white-space: pre-line;" class="small">
                  {video.descripcion ?? "Sin descripción disponible."}
                </p>
              </div>
              {/* Botón para ir a YouTube y añadir comentario */}
              <div><a
                href={video.url.replace("embed/", "watch?v=")}
                target="_blank"
                rel="noopener"
                class="btn btn-danger btn-sm mt-2"
              >
                Ver en YouTube
              </a></div>
            </div>            {/* Sección de comentarios */}
            <div class="text-white text-start px-2 px-md-3 mt-4 bg-upload rounded p-3 p-md-4">
              {/* Título de la sección de comentarios */}
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="fs-5 fs-md-4 mb-0">Comentarios</h5>
                <button 
                  id="reloadCommentsBtn" 
                  class="btn-reload"
                  data-video-id={videoId}
                  title="Actualizar comentarios"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16" class="reload-icon">
                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                  </svg>
                </button>
              </div>
              {/* Si hay comentarios, los muestra en una lista, si no, muestra un mensaje */}
              <div id="commentsContainer">
                {Array.isArray(video.comentarios) &&
                video.comentarios.length > 0 ? (
                  <div class="d-flex flex-column gap-2 gap-md-3">
                    {/* Mapea cada comentario a un bloque visual con avatar, autor, fecha y texto */}
                    {video.comentarios.map((comentario, idx) => {
                      const profileImg = comentario.authorProfileImageUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(comentario.author)}&background=222&color=fff&size=48`;
                      return (
                        <div class="d-flex align-items-start bg-grey-dark rounded p-2 p-md-3" style="gap: 0.75rem; min-width:0;">
                          <img
                            src={profileImg}
                            alt={comentario.author}
                            class="rounded-circle flex-shrink-0"
                            width="40"
                            height="40"
                            loading="lazy"
                            style="display:block;object-fit:cover;"
                          />
                          <div style="min-width:0;flex:1 1 0;overflow:hidden;">
                            <div class="fw-bold small text-truncate">{comentario.author}</div>
                            <div class="text-secondary small mb-1">{new Date(comentario.publishedAt).toLocaleDateString()}</div>
                            <div class="text-white small" style="word-break:break-word;line-height:1.4;">{comentario.text}</div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <p class="small">No hay comentarios para este video.</p>
                )}
              </div>
            </div>
          </div>          {/* Columna lateral: lista de más videos */}
          <div class="col-12 col-lg-3">
            <h5 class="text-white mb-3 px-2 px-md-0">Más videos</h5>
            <div class="d-flex flex-column gap-2 gap-md-3 px-2 px-md-0">
              {/* Muestra los demás videos como enlaces con miniatura y título */}
              {videos
                .filter((v) => v !== video)
                .map((v) => {
                  const videoId = v.url.split("/").pop();
                  return (
                    <a
                      href={`/video/${videoId}`}
                      class="d-flex text-decoration-none text-white video-sidebar-item p-2 rounded bg-grey-dark"
                    >
                      {/* Miniatura del video */}
                      <img
                        src={`https://img.youtube.com/vi/${videoId}/mqdefault.jpg`}
                        alt={v.titulo}
                        style="width: 80px; height: 45px; object-fit: cover; border-radius: 0.5rem; flex-shrink: 0;"
                        class="d-md-none"
                      />
                      <img
                        src={`https://img.youtube.com/vi/${videoId}/mqdefault.jpg`}
                        alt={v.titulo}
                        style="width: 100px; height: 56px; object-fit: cover; border-radius: 0.5rem; flex-shrink: 0;"
                        class="d-none d-md-block"
                      />
                      <div class="ms-2 ms-md-3 flex-grow-1 min-width-0">
                        {/* Título del video */}
                        <div class="fw-bold small text-start video-sidebar-title">{v.titulo}</div>
                        {/* Vistas y fecha relativa */}
                        <div class="text-secondary small text-start">
                          {parseInt(v.views).toLocaleString()} views{" "}
                          {timeAgo(v.date)}
                        </div>
                      </div>
                    </a>
                  );
                })}
            </div>
          </div>
        </div>
      </div>
    ) : (      // Si no se encuentra el video, muestra un mensaje de error
      <div class="container-fluid px-2 px-md-3 py-3 py-md-5 text-center text-white">
        <h2 class="fs-3 fs-md-2">Video no encontrado</h2>
        <a href="/" class="btn btn-secondary mt-3">
          Volver al inicio
        </a>
      </div>
    )
  }
  {/* Estilos para el reproductor y la barra lateral */}
  <style>
    .video-detail-player {
      width: 100%;
      max-width: 900px;
      aspect-ratio: 16 / 9;
      margin: 0 auto;
      background: #000;
      border-radius: 1rem;
      overflow: hidden;
    }
    
    .video-sidebar-item:hover {
      background: #333 !important;
      text-decoration: none;
      transform: translateY(-1px);
      transition: all 0.2s ease;
    }
    
    .video-sidebar-title {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      text-overflow: ellipsis;
      line-height: 1.3;
      max-height: 2.6em;
    }
    
    @media (max-width: 576px) {
      .video-detail-player {
        border-radius: 0.8rem;
      }
      
      .video-sidebar-title {
        font-size: 0.8rem !important;
        -webkit-line-clamp: 3;
        max-height: 3.6em;
      }
      
      .video-sidebar-item {
        padding: 0.75rem !important;
      }
    }
    
    @media (max-width: 768px) {
      .min-width-0 {
        min-width: 0;
      }
    }
    
    /* Estilos del botón de recarga */
    .btn-reload {
      background: transparent;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      padding: 8px;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
    }
    
    .btn-reload:hover {
      background: rgba(255, 255, 255, 0.1);
      color: white;
      border-color: rgba(255, 255, 255, 0.3);
      transform: translateY(-1px);
    }
    
    .btn-reload:active {
      transform: translateY(0);
    }
    
    .btn-reload:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }
    
    .reload-icon {
      transition: transform 0.3s ease;
    }
    
    .btn-reload:hover .reload-icon {
      transform: rotate(90deg);
    }
    
    .btn-reload.loading .reload-icon {
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    /* Estilos para mensajes de estado */
    .status-message {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 16px;
      border-radius: 8px;
      font-size: 0.875rem;
      font-weight: 500;
      z-index: 1000;
      max-width: 300px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease;
    }
    
    .status-message.show {
      opacity: 1;
      transform: translateX(0);
    }
    
    .status-message.success {
      background: rgba(34, 197, 94, 0.9);
      color: white;
      border-left: 4px solid #22c55e;
    }
    
    .status-message.error {
      background: rgba(239, 68, 68, 0.9);
      color: white;
      border-left: 4px solid #ef4444;
    }
    
    @media (max-width: 576px) {
      .status-message {
        top: 10px;
        right: 10px;
        left: 10px;
        max-width: none;
      }
    }
  </style>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const reloadBtn = document.getElementById('reloadCommentsBtn');
      const commentsContainer = document.getElementById('commentsContainer');
      
      // Función para mostrar mensajes de estado elegantes
      function showStatusMessage(message, type) {
        // Remover mensaje anterior si existe
        const existingMsg = document.querySelector('.status-message');
        if (existingMsg) {
          existingMsg.remove();
        }
        
        const statusMsg = document.createElement('div');
        statusMsg.className = 'status-message ' + type;
        statusMsg.textContent = message;
        document.body.appendChild(statusMsg);
        
        // Mostrar con animación
        setTimeout(() => statusMsg.classList.add('show'), 10);
        
        // Ocultar después de 3 segundos
        setTimeout(() => {
          statusMsg.classList.remove('show');
          setTimeout(() => statusMsg.remove(), 300);
        }, 3000);
      }
      
      if (reloadBtn && commentsContainer) {
        reloadBtn.addEventListener('click', async function() {
          let videoId = this.dataset.videoId;
          console.log('Button clicked, raw video ID:', videoId);
          
          // Extract video ID from current URL if not available
          if (!videoId) {
            const urlParts = window.location.pathname.split('/');
            videoId = urlParts[urlParts.length - 1];
            console.log('Extracted video ID from URL:', videoId);
          }
          
          if (!videoId) {
            console.error('No video ID found');
            showStatusMessage('Error: No se pudo obtener el ID del video', 'error');
            return;
          }
          
          // Mostrar estado de carga
          this.disabled = true;
          this.classList.add('loading');
          
          try {
            const apiUrl = '/api/comments/' + videoId;
            console.log('Fetching from:', apiUrl);
            
            const response = await fetch(apiUrl);
            const data = await response.json();
            
            console.log('API Response:', data);
            
            if (data.success && data.comments) {
              // Actualizar comentarios
              if (data.comments.length > 0) {
                const commentsHtml = data.comments.map(function(comment) {
                  const profileImg = comment.authorProfileImageUrl || 
                    'https://ui-avatars.com/api/?name=' + encodeURIComponent(comment.author) + '&background=222&color=fff&size=48';
                  
                  return '<div class="d-flex align-items-start bg-grey-dark rounded p-2 p-md-3" style="gap: 0.75rem; min-width:0;">' +
                    '<img src="' + profileImg + '" alt="' + comment.author + '" class="rounded-circle flex-shrink-0" width="40" height="40" loading="lazy" style="display:block;object-fit:cover;" />' +
                    '<div style="min-width:0;flex:1 1 0;overflow:hidden;">' +
                      '<div class="fw-bold small text-truncate">' + comment.author + '</div>' +
                      '<div class="text-secondary small mb-1">' + new Date(comment.publishedAt).toLocaleDateString() + '</div>' +
                      '<div class="text-white small" style="word-break:break-word;line-height:1.4;">' + comment.text + '</div>' +
                    '</div>' +
                  '</div>';
                }).join('');
                
                commentsContainer.innerHTML = '<div class="d-flex flex-column gap-2 gap-md-3">' + commentsHtml + '</div>';
                showStatusMessage(data.comments.length + ' comentarios actualizados', 'success');
              } else {
                commentsContainer.innerHTML = '<p class="small">No hay comentarios para este video.</p>';
                showStatusMessage('No se encontraron comentarios', 'success');
              }
              
            } else {
              console.error('API error:', data.error);
              throw new Error(data.error || 'Error al cargar comentarios');
            }
            
          } catch (error) {
            console.error('Error reloading comments:', error);
            showStatusMessage('Error al actualizar comentarios', 'error');
          }
          
          // Restaurar botón
          this.disabled = false;
          this.classList.remove('loading');
        });
      }
    });
  </script>
  {/* Pie de página */}
  <Footer />
</Layout>
